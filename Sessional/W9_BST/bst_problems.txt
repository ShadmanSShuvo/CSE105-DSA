#include <iostream>
using namespace std;

// Definition of a BST node
struct Node {
    int data;
    Node* left;
    Node* right;
    Node(int val) : data(val), left(nullptr), right(nullptr) {}
};

// 1. Insert a node in a BST
Node* insert(Node* root, int val) {
    if (root == nullptr) {
        return new Node(val);
    }
    if (val < root->data) {
        root->left = insert(root->left, val);
    } else if (val > root->data) {
        root->right = insert(root->right, val);
    }
    return root;
}

// 2. Search for a node in a BST
Node* search(Node* root, int val) {
    if (root == nullptr || root->data == val) {
        return root;
    }
    if (val < root->data) {
        return search(root->left, val);
    }
    return search(root->right, val);
}

// 3. Delete a node from a BST
Node* minValueNode(Node* node) {
    Node* current = node;
    while (current && current->left != nullptr) {
        current = current->left;
    }
    return current;
}

Node* deleteNode(Node* root, int val) {
    if (root == nullptr) {
        return root;
    }
    if (val < root->data) {
        root->left = deleteNode(root->left, val);
    } else if (val > root->data) {
        root->right = deleteNode(root->right, val);
    } else {
        // Node with only one child or no child
        if (root->left == nullptr) {
            Node* temp = root->right;
            delete root;
            return temp;
        } else if (root->right == nullptr) {
            Node* temp = root->left;
            delete root;
            return temp;
        }
        // Node with two children
        Node* temp = minValueNode(root->right);
        root->data = temp->data;
        root->right = deleteNode(root->right, temp->data);
    }
    return root;
}

// 4. Inorder traversal of a BST
void inorder(Node* root) {
    if (root != nullptr) {
        inorder(root->left);
        cout << root->data << " ";
        inorder(root->right);
    }
}

// 5. Validate if a binary tree is a BST
bool isValidBSTUtil(Node* root, long long min, long long max) {
    if (root == nullptr) {
        return true;
    }
    if (root->data <= min || root->data >= max) {
        return false;
    }
    return isValidBSTUtil(root->left, min, root->data) &&
           isValidBSTUtil(root->right, root->data, max);
}

bool isValidBST(Node* root) {
    return isValidBSTUtil(root, LLONG_MIN, LLONG_MAX);
}

// Main function to test the BST operations
int main() {
    Node* root = nullptr;
    
    // Insert nodes
    root = insert(root, 50);
    root = insert(root, 30);
    root = insert(root, 70);
    root = insert(root, 20);
    root = insert(root, 40);
    root = insert(root, 60);
    root = insert(root, 80);
    
    // Print inorder traversal
    cout << "Inorder traversal of BST: ";
    inorder(root);
    cout << endl;
    
    // Search for a node
    int searchVal = 40;
    if (search(root, searchVal)) {
        cout << "Node " << searchVal << " found in BST" << endl;
    } else {
        cout << "Node " << searchVal << " not found in BST" << endl;
    }
    
    // Delete a node
    root = deleteNode(root, 30);
    cout << "Inorder traversal after deleting 30: ";
    inorder(root);
    cout << endl;
    
    // Validate BST
    if (isValidBST(root)) {
        cout << "The tree is a valid BST" << endl;
    } else {
        cout << "The tree is not a valid BST" << endl;
    }
    
    return 0;
}