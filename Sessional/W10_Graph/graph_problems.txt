#include <bits/stdc++.h>
using namespace std;

// Problem 1: Depth-First Search (DFS)
class GraphDFS {
    int V;
    vector<vector<int>> adj;
    void DFSUtil(int v, vector<bool>& visited) {
        visited[v] = true;
        cout << v << " ";
        for (int neighbor : adj[v]) {
            if (!visited[neighbor]) {
                DFSUtil(neighbor, visited);
            }
        }
    }

public:
    GraphDFS(int vertices) : V(vertices) {
        adj.resize(V);
    }

    void addEdge(int v, int w) {
        adj[v].push_back(w);
    }

    void DFS(int start) {
        vector<bool> visited(V, false);
        DFSUtil(start, visited);
    }
};

// Problem 2: Breadth-First Search (BFS)
class GraphBFS {
    int V;
    vector<vector<int>> adj;

public:
    GraphBFS(int vertices) : V(vertices) {
        adj.resize(V);
    }

    void addEdge(int v, int w) {
        adj[v].push_back(w);
    }

    void BFS(int start) {
        vector<bool> visited(V, false);
        queue<int> q;
        visited[start] = true;
        q.push(start);

        while (!q.empty()) {
            int v = q.front();
            cout << v << " ";
            q.pop();
            for (int neighbor : adj[v]) {
                if (!visited[neighbor]) {
                    visited[neighbor] = true;
                    q.push(neighbor);
                }
            }
        }
    }
};

// Problem 3: Dijkstra’s Algorithm
class GraphDijkstra {
    int V;
    vector<vector<pair<int, int>>> adj;

public:
    GraphDijkstra(int vertices) : V(vertices) {
        adj.resize(V);
    }

    void addEdge(int u, int v, int weight) {
        adj[u].push_back({v, weight});
        adj[v].push_back({u, weight});
    }

    void dijkstra(int src) {
        vector<int> dist(V, INT_MAX);
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        dist[src] = 0;
        pq.push({0, src});

        while (!pq.empty()) {
            int u = pq.top().second;
            pq.pop();

            for (auto& neighbor : adj[u]) {
                int v = neighbor.first;
                int weight = neighbor.second;

                if (dist[u] + weight < dist[v]) {
                    dist[v] = dist[u] + weight;
                    pq.push({dist[v], v});
                }
            }
        }

        cout << "Vertex Distance from Source\n";
        for (int i = 0; i < V; ++i) {
            cout << i << "\t\t" << dist[i] << "\n";
        }
    }
};

// Problem 4: Detect Cycle in an Undirected Graph (using DFS)
class GraphCycle {
    int V;
    vector<vector<int>> adj;

    bool isCycleUtil(int v, vector<bool>& visited, int parent) {
        visited[v] = true;
        for (int neighbor : adj[v]) {
            if (!visited[neighbor]) {
                if (isCycleUtil(neighbor, visited, v)) return true;
            } else if (neighbor != parent) {
                return true;
            }
        }
        return false;
    }

public:
    GraphCycle(int vertices) : V(vertices) {
        adj.resize(V);
    }

    void addEdge(int v, int w) {
        adj[v].push_back(w);
        adj[w].push_back(v);
    }

    bool isCycle() {
        vector<bool> visited(V, false);
        for (int i = 0; i < V; i++) {
            if (!visited[i] && isCycleUtil(i, visited, -1)) {
                return true;
            }
        }
        return false;
    }
};

int main() {
    // Example usage for DFS
    cout << "DFS Traversal:\n";
    GraphDFS g1(4);
    g1.addEdge(0, 1);
    g1.addEdge(0, 2);
    g1.addEdge(1, 2);
    g1.addEdge(2, 0);
    g1.addEdge(2, 3);
    g1.addEdge(3, 3);
    g1.DFS(2);
    cout << "\n\n";

    // Example usage for BFS
    cout << "BFS Traversal:\n";
    GraphBFS g2(4);
    g2.addEdge(0, 1);
    g2.addEdge(0, 2);
    g2.addEdge(1, 2);
    g2.addEdge(2, 0);
    g2.addEdge(2, 3);
    g2.addEdge(3, 3);
    g2.BFS(2);
    cout << "\n\n";

    // Example usage for Dijkstra’s Algorithm
    cout << "Dijkstra’s Algorithm:\n";
    GraphDijkstra g3(5);
    g3.addEdge(0, 1, 4);
    g3.addEdge(0, 2, 8);
    g3.addEdge(1, 2, 2);
    g3.addEdge(1, 3, 5);
    g3.addEdge(2, 3, 5);
    g3.addEdge(2, 4, 9);
    g3.addEdge(3, 4, 4);
    g3.dijkstra(0);
    cout << "\n";

    // Example usage for Cycle Detection
    cout << "Cycle Detection:\n";
    GraphCycle g4(5);
    g4.addEdge(0, 1);
    g4.addEdge(1, 2);
    g4.addEdge(2, 3);
    g4.addEdge(3, 4);
    g4.addEdge(4, 0); // Creates a cycle
    cout << (g4.isCycle() ? "Graph contains cycle\n" : "Graph doesn't contain cycle\n");

    return 0;
}